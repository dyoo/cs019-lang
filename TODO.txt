MISSING LANGUAGE:

- add unchecked versions of sig forms
- add support for undefined and test against shared
- Hashof:, ...
- test against last year's code
- add parameterized signatures (esp for structs)

ERROR MESSAGES:

- better error source reporting
- better description names for signatures
- ((lambda: ([m : Number$] [n : Number$]) -> Number$ +) 1 2)
  produces
  sigs.rkt: ... signature-violation: #<procedure:+> is not a number?
- (define: v : (not: (Number$ -> Number$)) 5)
  produces
  sigs.rkt: ... cannot negate higher-order signatures such as signature
- error messages don't seem to use the right printer: eg,
  (define: s2n : (proc$ (String$ ->> Number$)) string->number)
  > (s2n "x")
  . . sigs.rkt:64:24: signature-violation: #f is not a number
  (prints #f instead of false)
and worse,
  (tree-sum (make-nd 10 (make-nd 5 (make-mt) (make-mt))
                        (make-nd 2 (make-nd 1 (make-mt) 10) (make-mt))))
  . . sigs.rkt:87:24: signature-violation: 10 is not a #f
  (prints #f instead of a useful name)

DOCUMENTATION:

- need to change printer to constructor
- you can set your default #lang in the menu
- pred->sig, or:, and:, not: expect flat predicates

NICETIES:

- Indentation levels for define:, lambda:, etc.
- Test with debugger
- Turn into a planet package
- Improve first-order Vectorof$ to not convert to list
- Remove redundancies in sigs.rkt
- Scribble docs
- multi-term define gets ASL error, not one from syntax-case
- quicker detection of use of HO sigs in or: and and:? BUT it cannot
  be so early as to eagerly evaluate the params, else we can't have
  forward references!

MISCELLANEOUS:

- DMdA: where did list-of go?
